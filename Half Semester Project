### Half Semester Project
It seems you have provided a list of background questions related to machine learning. To complete this task, I will address each question:

1. Which packages are available for ML? Describe the pros and cons and document the availability.
   
   There are numerous machine learning packages available, some of the most popular ones include:
   - Scikit-learn: Pros - Easy to use, well-documented, extensive community support. Cons - Limited scalability.
   - TensorFlow: Pros - Excellent for deep learning, good for production-level deployment. Cons - Steeper learning curve.
   - PyTorch: Pros - Dynamic computation graph, good for research and prototyping. Cons - Slightly less mature ecosystem compared to TensorFlow.
   - Keras: Pros - High-level API, easy to use, good for beginners. Cons - May lack flexibility for advanced users.
   - XGBoost/LightGBM/CatBoost: Pros - State-of-the-art gradient boosting implementations. Cons - May require tuning for optimal performance.
   
   Documentation and availability can be found on the respective websites and GitHub repositories for each package.

2. What is Chembl? How do you access it?

   ChEMBL is a large-scale bioactivity database that provides information on the properties of drugs and drug-like small molecules. It contains data on compounds, their targets, and the biological activity of these compounds. You can access it through the ChEMBL website (https://www.ebi.ac.uk/chembl/) or programmatically via its API.

3. What is machine learning, and how does it differ from traditional programming?

   Machine learning is a subset of artificial intelligence that enables systems to learn and improve from experience without being explicitly programmed. In traditional programming, rules and instructions are explicitly provided by the programmer to solve a specific task. In contrast, in machine learning, algorithms learn patterns and relationships from data to make predictions or decisions.

4. What are the key concepts and techniques in machine learning?

   Key concepts and techniques include supervised learning, unsupervised learning, reinforcement learning, neural networks, decision trees, support vector machines, clustering, dimensionality reduction, regularization, cross-validation, and model evaluation metrics.

5. What are the different types of machine learning algorithms?

   Machine learning algorithms can be categorized into supervised learning, unsupervised learning, semi-supervised learning, reinforcement learning, and self-supervised learning.

6. What are the common applications of machine learning?

   Common applications include image recognition, natural language processing, recommendation systems, predictive analytics, fraud detection, healthcare diagnostics, autonomous vehicles, and robotics.

7. How do you evaluate the performance of a machine learning model?

   Model performance can be evaluated using various metrics such as accuracy, precision, recall, F1-score, ROC curve, AUC-ROC, mean squared error, mean absolute error, etc. The choice of metric depends on the specific problem and the nature of the data.

8. How do you prepare data for use in a machine learning model?

   Data preparation involves tasks such as data cleaning, data transformation, feature selection, feature scaling, handling missing values, encoding categorical variables, and splitting the data into training and testing sets.

9. What are some common challenges in machine learning, and how can they be addressed?

   Common challenges include overfitting, underfitting, data scarcity, imbalanced data, noisy data, feature engineering, model interpretability, and scalability. These challenges can be addressed through techniques such as regularization, cross-validation, data augmentation, ensemble methods, and careful feature selection.

10. What are some resources and tools available to help you learn and practice machine learning?

    Resources include online courses (e.g., Coursera, Udacity, edX), books (e.g., "Introduction to Statistical Learning" by James et al., "Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow" by GÃ©ron), MOOCs (e.g., fast.ai), and tutorials (e.g., Towards Data Science, Kaggle). Tools include Jupyter notebooks, Kaggle kernels, TensorFlow Playground, Google Colab, and various machine learning libraries mentioned earlier.

Exercise 3; Machine Learning Tutorial
   1. What is in the training set, how big is it?

   As the data set we use the kinase.csv file provided by the course coordinators. This is split up by the function "train_test_split" from the scikit-learn library to split the data into 70% training and 30% test data. Resulting in a training set containing 125878 rows of 3 columns. 

   2. What modifications do you need to do to the data set to perform the tutorial.

   The only relevant columns in the dataset are "smiles", the string of the corresponding compound and "standard_value", the IC50 of the compound. Therefore the set needs to be striped from the remaining columns.
   Futher the strings in "smiles" needs to be converted to numerical data to apply a neural network. The MACCS fingerprint is saved as "fingerprints_df".

   3. What is a test set? Any other types of set?

   The test set is used to evaluate how well the models predictes values after it has been trained. Therefore the by the model predicted values are compared to a set of real values, the so called test set.
   Next to the previously mentioned Training set, according to ChatGPT there exists also the so called Validation Set: It is often used during the training process to tune hyperparameters and assess the model's performance on data that it hasn't been directly trained on. This helps to prevent overfitting to the training data and to select the best-performing model among different hyperparameter settings.

   4. 

   [1] import all the necessary libraries
   [2] Set path to this notebook
   [3] Load data
   [4] Check the dimension and missing value of the data
   [5] Look at head
   [6] Keep necessary columns
   [7] defined function "smiles_to_fp" which generates MACCS fingerprints from "smiles"
   [8] Execute "smiles_to_fp" to convert all SMILES strings to MACCS fingerprints
   [9] split the data into 70% training and 30% test data
   [10] Define neural network with the number of neurons in hidden layers and the activation function as arguments
   [11] Define neural network parameters
   [12] plot the respective losses
   [13] Save the model whichs batch size gives the best performance 
   [14] Evaluate the model on the test data
   [15] predict the IC50 values on the test data
   [16] visualize the predictions by plotting the predicted vs. the true IC50 values on the test set
   [17] 
